name: CI-CD receptor

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      AWS_SQS_NAME: ${{ secrets.AWS_SQS_NAME }}
      AWS_SQS_URL: ${{ secrets.AWS_SQS_URL }}
      AWS_MYSQL_HOST: ${{ secrets.AWS_MYSQL_HOST }}
      AWS_MYSQL_USER: ${{ secrets.AWS_MYSQL_USER }}
      AWS_MYSQL_PASSWORD: ${{ secrets.AWS_MYSQL_PASSWORD }}
      AWS_MYSQL_DB: ${{ secrets.AWS_MYSQL_DB }}
      AWS_SNS_ARN: ${{ secrets.AWS_SNS_ARN }}
      AWS_ECR_NAME: ${{ secrets.AWS_ECR_NAME }}
      AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      IMAGE_TAG: ${{ github.sha }}
      AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
      AWS_EC2_USER: ${{ secrets.AWS_EC2_USER }}
      AWS_EC2_SSH: ${{ secrets.AWS_EC2_SSH}}


    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.0'

      - name: Install dependencies
        run: npm install
  
      - name: Build project
        run: npm run build
  
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-folder
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        run: |
          docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_NAME:$IMAGE_TAG .
          docker push $AWS_ECR_REGISTRY/$AWS_ECR_NAME:$IMAGE_TAG

      - name: Output Image URL
        run: |
          echo "Image URL: $AWS_ECR_REGISTRY/$AWS_ECR_NAME:$IMAGE_TAG"
      
          - name: SSH into EC2 and deploy Docker container
          uses: appleboy/ssh-action@v0.1.6
          with:
            host: ${{ secrets.AWS_EC2_HOST }}
            username: ${{ secrets.AWS_EC2_USER }}
            key: ${{ secrets.AWS_EC2_SSH }}
            script: |
              # Detener cualquier contenedor existente
              docker stop $(docker ps -q)
              docker rm $(docker ps -a -q)
  
              # Descargar la última imagen de ECR
              docker pull $AWS_ECR_REGISTRY/$AWS_ECR_NAME:$IMAGE_TAG
  
              # Ejecutar el contenedor con la imagen más reciente
              docker run -d -p 80:80 $AWS_ECR_REGISTRY/$AWS_ECR_NAME:$IMAGE_TAG
  
      - name: Check if the application is running
        run: |
          curl --silent --fail http://$AWS_EC2_HOST || exit 1
      
